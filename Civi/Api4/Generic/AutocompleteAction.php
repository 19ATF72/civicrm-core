<?php

/*
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC. All rights reserved.                        |
 |                                                                    |
 | This work is published under the GNU AGPLv3 license with some      |
 | permitted exceptions and without any warranty. For full license    |
 | and copyright information, see https://civicrm.org/licensing       |
 +--------------------------------------------------------------------+
 */

namespace Civi\Api4\Generic;

use Civi\Api4\Utils\CoreUtil;

/**
 * Retrieve $ENTITIES for an autocomplete form field.
 *
 * @since 5.54
 * @method $this setInput(string $input) Set input term.
 * @method string getInput()
 * @method $this setIds(array $ids) Set array of ids.
 * @method array getIds()
 * @method $this setPage(int $page) Set current page.
 * @method array getPage()
 * @method $this setFormName(string $formName) Set formName.
 * @method string getFormName()
 * @method $this setFieldName(string $fieldName) Set fieldName.
 * @method string getFieldName()
 */
class AutocompleteAction extends AbstractAction {
  use Traits\SavedSearchInspectorTrait;

  /**
   * Autocomplete search input for search mode
   *
   * @var string
   */
  protected $input = '';

  /**
   * Array of ids for render mode
   *
   * @var array
   */
  protected $ids;

  /**
   * @var int
   */
  protected $page = 1;

  /**
   * Name of SavedSearch to use for filtering.
   * @var string|array
   */
  protected $savedSearch;

  /**
   * Either the name of the display or an array containing the display definition (for preview mode)
   *
   * Leave NULL to use the autogenerated default.
   *
   * @var string|array|null
   */
  protected $display;

  /**
   * @var string
   */
  protected $formName;

  /**
   * @var string
   */
  protected $fieldName;

  /**
   * Unique identifier to be returned as key (typically `id` or `name`)
   *
   * @var string
   */
  protected $key;

  /**
   * Filters set programmatically by `civi.api.prepare` listener. Automatically trusted.
   *
   * Format: [fieldName => value][]
   * @var array
   */
  private $trustedFilters = [];

  /**
   * @var string
   * @see \Civi\Api4\Generic\Traits\SavedSearchInspectorTrait::loadSearchDisplay
   */
  protected $_displayType = 'autocomplete';

  /**
   * Fetch results.
   *
   * @param \Civi\Api4\Generic\Result $result
   */
  public function _run(Result $result) {
    $this->checkPermissionToLoadSearch();

    $entityName = $this->getEntityName();

    if (!$this->savedSearch) {
      $this->savedSearch = ['api_entity' => $entityName];
    }
    $this->loadSavedSearch();
    $this->loadSearchDisplay();

    // Pass-through this parameter
    $this->display['acl_bypass'] = !$this->getCheckPermissions();

    $idField = $this->getIdFieldName();
    $labelField = $this->display['settings']['columns'][0]['key'];
    // If label column uses a rewrite, search on those fields too
    if (!empty($this->display['settings']['columns'][0]['rewrite'])) {
      $labelField = implode(',', array_unique(array_merge([$labelField], $this->getTokens($this->display['settings']['columns'][0]['rewrite']))));
    }

    $apiParams =& $this->savedSearch['api_params'];
    // Render mode: fetch by id
    if ($this->ids) {
      $apiParams['where'][] = [$idField, 'IN', $this->ids];
      unset($this->display['settings']['pager']);
      $return = NULL;
    }
    // Search mode: fetch a page of results based on input
    else {
      $this->display['settings']['limit'] = $this->display['settings']['limit'] ?? \Civi::settings()->get('search_autocomplete_count') ?: 10;
      $this->display['settings']['pager'] = [];
      $return = 'scroll:' . $this->page;
      $this->addFilter($labelField, $this->input);
    }

    // Ensure SELECT param includes all fields & filters
    $select = [$idField];
    foreach ($this->display['settings']['columns'] as $column) {
      if ($column['type'] === 'field') {
        $select[] = $column['key'];
      }
      if (!empty($column['rewrite'])) {
        $select = array_merge($select, $this->getTokens($column['rewrite']));
      }
    }
    foreach ($this->trustedFilters as $fields => $val) {
      $select = array_merge($select, explode(',', $fields));
    }
    if (!empty($this->display['settings']['color'])) {
      $select[] = $this->display['settings']['color'];
    }
    $apiParams['select'] = array_unique(array_merge($apiParams['select'], $select));

    $apiResult = \Civi\Api4\SearchDisplay::run(FALSE)
      ->setSavedSearch($this->savedSearch)
      ->setDisplay($this->display)
      ->setFilters($this->trustedFilters)
      ->setReturn($return)
      ->execute();

    foreach ($apiResult as $row) {
      $item = [
        'id' => $row['data'][$idField],
        'label' => $row['columns'][0]['val'],
        'icon' => $row['columns'][0]['icons'][0]['class'] ?? NULL,
        'description' => [],
      ];
      foreach (array_slice($row['columns'], 1) as $col) {
        $item['description'][] = $col['val'];
      }
      if (!empty($this->display['settings']['color'])) {
        $item['color'] = $row['data'][$this->display['settings']['color']] ?? NULL;
      }
      $result[] = $item;
    }
    $result->setCountMatched($apiResult->count());
  }

  /**
   * Method for `civi.api.prepare` listener to add a trusted filter.
   *
   * @param string $fieldName
   * @param mixed $value
   */
  public function addFilter(string $fieldName, $value) {
    $this->trustedFilters[$fieldName] = $value;
  }

  /**
   * @param $fieldNameWithSuffix
   * @return bool
   */
  private function checkFieldAccess($fieldNameWithSuffix) {
    [$fieldName] = explode(':', $fieldNameWithSuffix);
    if (
      in_array($fieldName, $this->_apiParams['select'], TRUE) ||
      in_array($fieldNameWithSuffix, $this->_apiParams['select'], TRUE) ||
      in_array($fieldName, $this->savedSearch['api_params']['select'], TRUE) ||
      in_array($fieldNameWithSuffix, $this->savedSearch['api_params']['select'], TRUE)
    ) {
      return TRUE;
    }
    // Proceed only if permissions are being enforced.'
    // Anonymous users in permission-bypass mode should not be allowed to set arbitrary filters.
    if ($this->getCheckPermissions()) {
      // This function checks field permissions
      return (bool) $this->getField($fieldName);
    }
    return FALSE;
  }

  /**
   * By default, returns the primary key of the entity (typically `id`).
   *
   * If $this->key param is set, it will allow it ONLY if the field is a unique index on the entity.
   * This is a security measure. Allowing any value could give access to potentially sentitive data.
   *
   * @return string
   */
  private function getIdFieldName() {
    $entityName = $this->savedSearch['api_entity'];
    if ($this->key) {
      /** @var \CRM_Core_DAO $dao */
      $dao = CoreUtil::getInfoItem($entityName, 'dao');
      if ($dao && method_exists($dao, 'indices')) {
        foreach ($dao::indices(FALSE) as $index) {
          if (!empty($index['unique']) && in_array($this->key, $index['field'], TRUE)) {
            return $this->key;
          }
        }
      }
    }
    return CoreUtil::getIdFieldName($entityName);
  }

  /**
   * @return array
   */
  public function getPermissions() {
    // Permissions for this action are checked internally
    return [];
  }

}
